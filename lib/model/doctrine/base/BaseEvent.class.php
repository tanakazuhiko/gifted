<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Event', 'doctrine');

/**
 * BaseEvent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $place_id
 * @property string $name
 * @property date $startdate
 * @property date $enddate
 * @property string $year
 * @property string $closeddays
 * @property string $openhours
 * @property integer $prefectureid
 * @property string $place
 * @property string $price
 * @property string $contents
 * @property string $image
 * @property string $url
 * @property string $contact
 * @property float $latitude
 * @property float $longitude
 * @property integer $event_flag
 * @property integer $flag_art
 * @property integer $flag_product
 * @property integer $flag_music
 * @property integer $flag_food
 * @property integer $flag_talk
 * @property integer $flag_dance
 * @property integer $flag_other
 * @property string $tags
 * @property integer $delete_flag
 * @property timestamp $created_at
 * @property timestamp $updated_at
 * @property Place $Place
 * 
 * @method integer   getId()           Returns the current record's "id" value
 * @method integer   getPlaceId()      Returns the current record's "place_id" value
 * @method string    getName()         Returns the current record's "name" value
 * @method date      getStartdate()    Returns the current record's "startdate" value
 * @method date      getEnddate()      Returns the current record's "enddate" value
 * @method string    getYear()         Returns the current record's "year" value
 * @method string    getCloseddays()   Returns the current record's "closeddays" value
 * @method string    getOpenhours()    Returns the current record's "openhours" value
 * @method integer   getPrefectureid() Returns the current record's "prefectureid" value
 * @method string    getPlace()        Returns the current record's "place" value
 * @method string    getPrice()        Returns the current record's "price" value
 * @method string    getContents()     Returns the current record's "contents" value
 * @method string    getImage()        Returns the current record's "image" value
 * @method string    getUrl()          Returns the current record's "url" value
 * @method string    getContact()      Returns the current record's "contact" value
 * @method float     getLatitude()     Returns the current record's "latitude" value
 * @method float     getLongitude()    Returns the current record's "longitude" value
 * @method integer   getEventFlag()    Returns the current record's "event_flag" value
 * @method integer   getFlagArt()      Returns the current record's "flag_art" value
 * @method integer   getFlagProduct()  Returns the current record's "flag_product" value
 * @method integer   getFlagMusic()    Returns the current record's "flag_music" value
 * @method integer   getFlagFood()     Returns the current record's "flag_food" value
 * @method integer   getFlagTalk()     Returns the current record's "flag_talk" value
 * @method integer   getFlagDance()    Returns the current record's "flag_dance" value
 * @method integer   getFlagOther()    Returns the current record's "flag_other" value
 * @method string    getTags()         Returns the current record's "tags" value
 * @method integer   getDeleteFlag()   Returns the current record's "delete_flag" value
 * @method timestamp getCreatedAt()    Returns the current record's "created_at" value
 * @method timestamp getUpdatedAt()    Returns the current record's "updated_at" value
 * @method Place     getPlace()        Returns the current record's "Place" value
 * @method Event     setId()           Sets the current record's "id" value
 * @method Event     setPlaceId()      Sets the current record's "place_id" value
 * @method Event     setName()         Sets the current record's "name" value
 * @method Event     setStartdate()    Sets the current record's "startdate" value
 * @method Event     setEnddate()      Sets the current record's "enddate" value
 * @method Event     setYear()         Sets the current record's "year" value
 * @method Event     setCloseddays()   Sets the current record's "closeddays" value
 * @method Event     setOpenhours()    Sets the current record's "openhours" value
 * @method Event     setPrefectureid() Sets the current record's "prefectureid" value
 * @method Event     setPlace()        Sets the current record's "place" value
 * @method Event     setPrice()        Sets the current record's "price" value
 * @method Event     setContents()     Sets the current record's "contents" value
 * @method Event     setImage()        Sets the current record's "image" value
 * @method Event     setUrl()          Sets the current record's "url" value
 * @method Event     setContact()      Sets the current record's "contact" value
 * @method Event     setLatitude()     Sets the current record's "latitude" value
 * @method Event     setLongitude()    Sets the current record's "longitude" value
 * @method Event     setEventFlag()    Sets the current record's "event_flag" value
 * @method Event     setFlagArt()      Sets the current record's "flag_art" value
 * @method Event     setFlagProduct()  Sets the current record's "flag_product" value
 * @method Event     setFlagMusic()    Sets the current record's "flag_music" value
 * @method Event     setFlagFood()     Sets the current record's "flag_food" value
 * @method Event     setFlagTalk()     Sets the current record's "flag_talk" value
 * @method Event     setFlagDance()    Sets the current record's "flag_dance" value
 * @method Event     setFlagOther()    Sets the current record's "flag_other" value
 * @method Event     setTags()         Sets the current record's "tags" value
 * @method Event     setDeleteFlag()   Sets the current record's "delete_flag" value
 * @method Event     setCreatedAt()    Sets the current record's "created_at" value
 * @method Event     setUpdatedAt()    Sets the current record's "updated_at" value
 * @method Event     setPlace()        Sets the current record's "Place" value
 * 
 * @package    gifted
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('event');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('place_id', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('name', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('startdate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('enddate', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('year', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('closeddays', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('openhours', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('prefectureid', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('place', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('price', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('contents', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('image', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('url', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('contact', 'string', 1024, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1024,
             ));
        $this->hasColumn('latitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('longitude', 'float', null, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('event_flag', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('flag_art', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('flag_product', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('flag_music', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('flag_food', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('flag_talk', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('flag_dance', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('flag_other', 'integer', 2, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => false,
             'autoincrement' => false,
             'length' => 2,
             ));
        $this->hasColumn('tags', 'string', null, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => '',
             ));
        $this->hasColumn('delete_flag', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('created_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('updated_at', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Place', array(
             'local' => 'place_id',
             'foreign' => 'id'));
    }
}